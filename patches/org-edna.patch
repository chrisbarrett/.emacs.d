diff --git a/org-edna.el b/org-edna.el
index 1cdc52b..9c7f9cb 100644
--- a/org-edna.el
+++ b/org-edna.el
@@ -1450,14 +1450,14 @@ required."
                         string-end))))
     (when (string-match regexp s)
       (let* ((dir (if (> (match-end 1) (match-beginning 1))
-		      (string-to-char (substring (match-string 1 s) -1))
-		    ?+))
-	     (rel (and (match-end 1) (= 2 (- (match-end 1) (match-beginning 1)))))
-	     (n (if (match-end 2) (string-to-number (match-string 2 s)) 1))
-	     (what (if (match-end 3) (match-string 3 s) "d"))
-	     (wday1 (cdr (assoc (downcase what) parse-time-weekdays)))
-	     (date (if rel default today))
-	     (wday (nth 6 (decode-time date)))
+                      (string-to-char (substring (match-string 1 s) -1))
+                    ?+))
+             (rel (and (match-end 1) (= 2 (- (match-end 1) (match-beginning 1)))))
+             (n (if (match-end 2) (string-to-number (match-string 2 s)) 1))
+             (what (if (match-end 3) (match-string 3 s) "d"))
+             (wday1 (cdr (assoc (downcase what) parse-time-weekdays)))
+             (date (if rel default today))
+             (wday (nth 6 (decode-time date)))
              ;; Are we worrying about where we land?
              (have-landing (match-end 4))
              (landing-direction (string-to-char
@@ -1465,7 +1465,7 @@ required."
                                      (match-string 5 s)
                                    "+")))
              (landing-type (when have-landing (match-string 6 s)))
-	     delta ret)
+             delta ret)
         (setq
          ret
          (pcase what
@@ -1483,12 +1483,12 @@ required."
             (list (* n (if (= dir ?-) -1 1)) what rel))
            ((pred (lambda (arg) (member arg weekdays)))
             (setq delta (mod (+ 7 (- wday1 wday)) 7))
-	    (when (= delta 0) (setq delta 7))
-	    (when (= dir ?-)
-	      (setq delta (- delta 7))
-	      (when (= delta 0) (setq delta -7)))
-	    (when (> n 1) (setq delta (+ delta (* (1- n) (if (= dir ?-) -7 7)))))
-	    (list delta "d" rel))))
+            (when (= delta 0) (setq delta 7))
+            (when (= dir ?-)
+              (setq delta (- delta 7))
+              (when (= delta 0) (setq delta -7)))
+            (when (> n 1) (setq delta (+ delta (* (1- n) (if (= dir ?-) -7 7)))))
+            (list delta "d" rel))))
         (if (or (not have-landing)
                 (member what '("M" "h"))) ;; Don't change landing for minutes or hours
             ret ;; Don't worry about landing, just return
@@ -1579,9 +1579,9 @@ DEFAULT (++/--)."
     (when (string-match regexp arg)
       (pcase-let* ((inc (match-string 1 arg))
                    (dir (if (not (string-empty-p inc)) ;; non-empty string
-		            (string-to-char (substring inc -1))
-		          ?+))
-	           (rel (= (length inc) 2))
+                            (string-to-char (substring inc -1))
+                          ?+))
+                   (rel (= (length inc) 2))
                    (numeric-dir (if (= dir ?+) 1 -1))
                    (nth (* (string-to-number (match-string 2 arg)) numeric-dir))
                    (dayname (let* ((tmp (match-string 3 arg))
@@ -1931,37 +1931,37 @@ When INCREMENT is non-nil, set the property to the next allowed value."
   (interactive "P")
   (when (equal value 0) (setq value 10))
   (let* ((completion-ignore-case t)
-	 (prop org-effort-property)
-	 (cur (org-entry-get nil prop))
-	 (allowed (org-property-get-allowed-values nil prop 'table))
-	 (existing (mapcar 'list (org-property-values prop)))
-	 rpl
-	 (val (cond
-	       ((stringp value) value)
-	       ((and allowed (integerp value))
-		(or (car (nth (1- value) allowed))
-		    (car (org-last allowed))))
-	       ((and allowed increment)
-		(or (cl-caadr (member (list cur) allowed))
-		    (user-error "Allowed effort values are not set")))
-	       (allowed
-		(message "Select 1-9,0, [RET%s]: %s"
-			 (if cur (concat "=" cur) "")
-			 (mapconcat 'car allowed " "))
-		(setq rpl (read-char-exclusive))
-		(if (equal rpl ?\r)
-		    cur
-		  (setq rpl (- rpl ?0))
-		  (when (equal rpl 0) (setq rpl 10))
-		  (if (and (> rpl 0) (<= rpl (length allowed)))
-		      (car (nth (1- rpl) allowed))
-		    (org-completing-read "Effort: " allowed nil))))
-	       (t
-		(org-completing-read
-		 (concat "Effort" (and cur (string-match "\\S-" cur)
-				       (concat " [" cur "]"))
-			 ": ")
-		 existing nil nil "" nil cur)))))
+         (prop org-effort-property)
+         (cur (org-entry-get nil prop))
+         (allowed (org-property-get-allowed-values nil prop 'table))
+         (existing (mapcar 'list (org-property-values prop)))
+         rpl
+         (val (cond
+               ((stringp value) value)
+               ((and allowed (integerp value))
+                (or (car (nth (1- value) allowed))
+                    (car (org-last allowed))))
+               ((and allowed increment)
+                (or (cl-caadr (member (list cur) allowed))
+                    (user-error "Allowed effort values are not set")))
+               (allowed
+                (message "Select 1-9,0, [RET%s]: %s"
+                         (if cur (concat "=" cur) "")
+                         (mapconcat 'car allowed " "))
+                (setq rpl (read-char-exclusive))
+                (if (equal rpl ?\r)
+                    cur
+                  (setq rpl (- rpl ?0))
+                  (when (equal rpl 0) (setq rpl 10))
+                  (if (and (> rpl 0) (<= rpl (length allowed)))
+                      (car (nth (1- rpl) allowed))
+                    (org-completing-read "Effort: " allowed nil))))
+               (t
+                (org-completing-read
+                 (concat "Effort" (and cur (string-match "\\S-" cur)
+                                       (concat " [" cur "]"))
+                         ": ")
+                 existing nil nil "" nil cur)))))
     (unless (equal (org-entry-get nil prop) val)
       (org-entry-put nil prop val))
     (org-refresh-property
@@ -2239,7 +2239,8 @@ same as \"consider\"."
                           org-edna-blocker-section-marker
                           org-edna-trigger-section-marker)))
       ;; Strip the BLOCKER key
-      (when (string-match "^BLOCKER\n\\(\\(?:.*\n\\)+\\)" original-text)
+      (when (string-match (rx bol "BLOCKER" (+ "\n") (group (+ nonl)))
+                          original-text)
         (org-edna-replace-newlines (match-string 1 original-text))))))
 
 (defun org-edna-edit-trigger-section-text ()
@@ -2249,7 +2250,8 @@ same as \"consider\"."
                           org-edna-trigger-section-marker
                           (point-max-marker))))
       ;; Strip the TRIGGER key
-      (when (string-match "^TRIGGER\n\\(\\(?:.*\n\\)+\\)" original-text)
+      (when (string-match (rx bol "TRIGGER" (+ "\n") (group (+ nonl)))
+                          original-text)
         (org-edna-replace-newlines (match-string 1 original-text))))))
 
 (defvar org-edna-edit-map
