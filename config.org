# -*- eval: (add-hook 'after-save-hook #'tangle-init-files nil t); -*-
#+title: Emacs Configuration
#+author: Chris Barrett
#+property: header-args :results silent
#+property: header-args:emacs-lisp :tangle "config.el"
#+startup: fold

* Early Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle "early-init.el"
:END:

#+begin_src emacs-lisp
  ;;; early-init.el -- Run at the beginning of Emacs startup sequence.  -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;; This file was generated by org-babel from config.org and should not be edited
  ;; directly.

  ;;; Code:
#+end_src

Set an environment variable so child processes can detect that they're inside
Emacs.

#+begin_src emacs-lisp
  (setenv "INSIDE_EMACS" "true")
#+end_src

Crank up the max size of subprocess output to read. This is needed for language
servers to perform well, since they communicate using large chunks of JSON.

#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+end_src

** Disable package.el

Disable =package.el=, since it increases startup time and I use
[[https://github.com/nix-community/emacs-overlay][nix-community/emacs-overlay]] to handle package installation.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

** Garbage collection settings

Garbage collection runs slow down the Emacs startup sequence. Temporarily
increase settings. We will set final values at the end of the startup sequence.

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.7)
#+end_src

** ELN cache path

Override the ELN cache directory so that it's in an XDG-conformant directory.

#+begin_src emacs-lisp
  (when (boundp 'comp-eln-load-path)
    (let ((cache-dir "~/.cache/emacs/eln-cache/"))
      (mkdir cache-dir t)
      (add-to-list 'comp-eln-load-path cache-dir)))
#+end_src

** Apply early display settings

Enable pixel-wise frame resizing so tiling window managers do the right thing.

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

Disable some window chrome that doesn't make sense in a keyboard-driven UI.

#+begin_src emacs-lisp
  (custom-set-variables '(menu-bar-mode nil)
                        '(tool-bar-mode . nil)
                        '(scroll-bar-mode nil))

  (modify-all-frames-parameters '((vertical-scroll-bars)
                                  (name . "Emacs")))
#+end_src


* File header

#+begin_src emacs-lisp
  ;;; config.el -- User init file for Emacs.  -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;; This file was generated by org-babel from config.org and should not be edited
  ;; directly.

  ;;; Code:
#+end_src

* Startup

** Tune garbage collection

See: [[https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][Why are you changing gc-cons-threshold?]]

#+begin_src emacs-lisp
  (defvar config-default-gc-threshold 800000)

  (defun config--inhibit-gc ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun config--enable-gc ()
    (setq gc-cons-threshold config-default-gc-threshold))
#+end_src

Restore GC settings after init sequence has completed.

#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'config--enable-gc)
#+end_src

Prevent GCs during user input in the minibuffer.

#+begin_src emacs-lisp
  (add-hook 'minibuffer-setup-hook #'config--inhibit-gc)
  (add-hook 'minibuffer-exit-hook #'config--enable-gc)
#+end_src

** Set initial background colour

Set a reasonable background colour before colour theme is loaded by checking the
current GNOME theme.

#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
    (let ((gtk-theme (with-temp-buffer
                       (ignore-errors
                         (call-process "gsettings" nil t nil
                                       "get" "org.gnome.desktop.interface" "gtk-theme"))
                       (buffer-string))))
      (set-background-color (if (string-match-p "dark" gtk-theme) "#282c34" "#FDF6E3"))))
#+end_src

** Configure =use-package=

=use-package= provides a structured DSL for Lisp package configuration.

See: [[https://github.com/jwiegley/use-package][jwiegley/use-package]]

#+begin_src emacs-lisp
  (with-no-warnings
    (setq use-package-always-defer t)
    (setq use-package-verbose t))

  (eval-when-compile
    (require 'use-package))
  #+end_src

Enable =general=, which provides a key-binding DSL supported by =use-package=.

See: [[https://github.com/noctuid/general.el][noctuid/general.el]]

#+begin_src emacs-lisp
  (use-package general
    :demand t)
#+end_src

** Load features used often in config

#+begin_src emacs-lisp
  (require 'dash)
  (require 'f)
  (require 'subr-x)
#+end_src

Load =cl= early to avoid warnings caused by reorganised functions in Emacs 27+.

#+begin_src emacs-lisp
  (with-no-warnings
    (require 'cl))
#+end_src

** Configure paths and config layout

#+begin_src emacs-lisp
  (require 'paths (expand-file-name "paths.el" user-emacs-directory))
  (paths-initialise)
#+end_src

Load themes from =.emacs.d/themes=.

#+begin_src emacs-lisp
  (setq custom-theme-directory (concat paths-themes-directory "/"))
#+end_src

*** Configure =no-littering= to use these paths

Customises many packages to create a cleaner =.emacs.d= layout.

See: [[https://github.com/emacscollective/no-littering][emacscollective/no-littering]]

#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :custom
    ((no-littering-etc-directory paths-etc-directory)
     (no-littering-var-directory paths-cache-directory)))
#+end_src

Teach =recentf= to use these paths

#+begin_src emacs-lisp
  (use-package recentf
    :after (no-littering)
    :config
    (progn
      (add-to-list 'recentf-exclude no-littering-etc-directory)
      (add-to-list 'recentf-exclude no-littering-var-directory)))
#+end_src

** Load Lisp files from certain other directories                 :disabled:

Load host-specific settings, which are not checked into version control.

#+begin_src emacs-lisp
  (when (file-exists-p paths-hostfile)
    (load-file paths-hostfile))
#+end_src

Load lisp in =org= and =ledger= dirs.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (when (file-directory-p paths-org-lisp-directory)
      (load (expand-file-name "init.el" paths-org-lisp-directory) t)))

  (when (file-directory-p paths-ledger-lisp-directory)
    (load (expand-file-name "init.el" paths-ledger-lisp-directory) t))
#+end_src

* Common advice

#+begin_src emacs-lisp
  (defun advice-ignore-errors (f &rest args)
    (ignore-errors
      (apply f args)))
#+end_src

* Editing functions

#+begin_src emacs-lisp
  (defun insert-uuid ()
    "Insert a UUID at point."
    (interactive "*")
    (insert (string-trim (shell-command-to-string "uuidgen"))))
#+end_src


* Customise builtin features

Set C source directory to use the source files from the Nix build.

#+begin_src emacs-lisp
  (use-package find-func
    :custom
    ((find-function-C-source-directory (getenv "NIX_EMACS_SRC_DIR"))))
#+end_src

Always use one-char =y-or-n-p=.

#+begin_src emacs-lisp
  (defalias #'yes-or-no-p #'y-or-n-p)
#+end_src

Don't use the system trash can.

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash nil)
#+end_src

Do not truncate the results of =eval-expression= and friends when logging their
output with =message=.

#+begin_src emacs-lisp
  (setq eval-expression-print-length nil)
  (setq eval-expression-print-level nil)
#+end_src

Use 'Emacs', rather than the selected buffer, as the window manager's title for
frames.

#+begin_src emacs-lisp
  (setq frame-title-format "Emacs")
#+end_src

Instantly display current keystrokes in mini buffer

#+begin_src emacs-lisp
 (setq echo-keystrokes 0.02)
#+end_src

Save cookies to a cache file.

#+begin_src emacs-lisp
  (use-package url
    :custom
    ((url-cookie-file (expand-file-name "cookies" paths-cache-directory))))
#+end_src

Prefer more recent Lisp files to outdated ELC files when loading.

#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src


Do not query the user to accept insecure connections. Just disconnect them.

#+begin_src emacs-lisp
  (use-package nsm
    :custom
    ((nsm-noninteractive t)))
#+end_src

** Enable useful commands

#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'erase-buffer 'disabled nil)
#+end_src

** General file & buffer settings

Always insert a final newline, as per the Unix convention.

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

Make scripts executable (using =chmod=) after save.

#+begin_src emacs-lisp
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src

Set default indentation settings.

#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (setq-default indent-tabs-mode nil)
#+end_src

Don't require two spaces to signal the end of a sentence--I don't use
sentence-based commands that often anyway.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

Don't nag when trying to create a new file or buffer.

#+begin_src emacs-lisp
  (setq confirm-nonexistent-file-or-buffer nil)
#+end_src

Do not show =^M= chars in files containing mixed UNIX and DOS line endings.

#+begin_src emacs-lisp
  (defun config--hide-dos-eol ()
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))

  (add-hook 'after-change-major-mode-hook #'config--hide-dos-eol)
#+end_src

** Whitespace handling

Insert a leading space after comment start for new comment lines.

#+begin_src emacs-lisp
  (autoload 'thing-at-point-looking-at "thingatpt")

  (defun config--comment-insert-space (&rest _)
    (when (and comment-start
               (thing-at-point-looking-at (regexp-quote comment-start)))
      (unless (or (thing-at-point-looking-at (rx (+ space))))
        (just-one-space))))

  (advice-add #'comment-indent-new-line :after #'config--comment-insert-space)
#+end_src

Bind some simple key commands.

#+begin_src emacs-lisp
  (use-package simple
    :general ("M-SPC" #'cycle-spacing))
#+end_src

** File encoding

Use UTF-8 everywhere by default.

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment 'utf-8)
#+end_src

** Disable unwanted features

Don't show the default startup screen.

#+begin_src emacs-lisp
  (setq initial-scratch-message nil)
  (setq inhibit-startup-message t)
  (setq initial-major-mode 'fundamental-mode)
#+end_src

Disable cursor blinking--I find it distracting.

#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src

Never show the useless hello file.

#+begin_src emacs-lisp
  (defalias #'view-hello-file #'ignore)
#+end_src


Unset 2-window scrolling shortcuts.

#+begin_src emacs-lisp
  (global-unset-key (kbd "<f2>"))
  (global-unset-key (kbd "S-<f2>"))
#+end_src

Disable audible bell.

#+begin_src emacs-lisp
  (setq ring-bell-function #'ignore)
#+end_src


Don't pollute directories with lockfiles, since I only run one instance of Emacs
and never need to prevent concurrent file access.

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

Don't nag when following symlinks to files under version control.

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

Don't try to ping things that look like domain names

#+begin_src emacs-lisp
  (use-package ffap
    :custom
    ((ffap-machine-p-known 'reject)))
#+end_src

Disable warnings from obsolete advice system, since these are generally not
actionable.

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
#+end_src

Don't confirm before killing subprocesses on exit.

#+begin_src emacs-lisp
  (setq confirm-kill-processes nil)

  (defun config--suppress-no-process-prompt (fn &rest args)
    (cl-labels ((process-list () nil))
      (apply fn args)))

  (advice-add #'save-buffers-kill-emacs :around #'config--suppress-no-process-prompt)
#+end_src

** ANSI colour code support

Process ANSI color codes in shell output.

#+begin_src emacs-lisp
  (autoload 'ansi-color-apply-on-region "ansi-color")

  (defun config--display-ansi-codes (buf &rest _)
    (and (bufferp buf)
         (string= (buffer-name buf) "*Shell Command Output*")
         (with-current-buffer buf
           (ansi-color-apply-on-region (point-min) (point-max)))))

  (advice-add #'display-message-or-buffer :before #'config--display-ansi-codes)
#+end_src

** Minibuffer settings

Keep a longer history by default.

#+begin_src emacs-lisp
  (setq history-length 1000)
#+end_src

Hide files with boring extensions from find-file

#+begin_src emacs-lisp
  (defun config--ff-hide-boring-files-in-completion (result)
    "Filter RESULT using `completion-ignored-extensions'."
    (if (and (listp result) (stringp (car result)) (cdr result))
        (let ((matches-boring (rx-to-string `(and (or "."
                                                      ".."
                                                      ".DS_Store"
                                                      "__pycache__/"
                                                      ".cache/"
                                                      ".ensime_cache/"
                                                      ,@completion-ignored-extensions)
                                                  eos))))
          (seq-remove (lambda (it)
                        (and (stringp it) (string-match-p matches-boring it)))
                      result))
      result))

  (advice-add #'completion--file-name-table :filter-return #'config--ff-hide-boring-files-in-completion)
#+end_src

Remove lingering =*completions*= buffer whenever we exit the minibuffer.

#+begin_src emacs-lisp
  (defun config--cleanup-completions-buffer ()
    (when-let* ((buf (get-buffer "*Completions*")))
      (kill-buffer buf)))

  (add-hook 'minibuffer-exit-hook #'config--cleanup-completions-buffer)
#+end_src

** Backup settings

Emacs will automatically keep backups of unsaved files a you edit, which helps
with crash recovery.

#+begin_src emacs-lisp
  (setq make-backup-files nil)
  ;; (setq kept-new-versions 6)
  ;; (setq delete-old-versions t)
  ;; (setq version-control t)
#+end_src

Create autosave files inside the XDG cache directory.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name "auto-save" paths-cache-directory) t)))
#+end_src

** Write custom settings to a separate file

Keep custom settings in a separate file. This keeps =init.el= clean.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (when (file-exists-p custom-file)
    (load-file custom-file))
#+end_src

** Copy-paste & clipboard settings

Share the Emacs kill ring with the host OS clipboard.

#+begin_src emacs-lisp
  (setq select-enable-clipboard t)
  (setq save-interprogram-paste-before-kill t)
#+end_src

Prevent duplicated entries in the kill ring.

#+begin_src emacs-lisp
  (setq kill-do-not-save-duplicates t)
#+end_src

Clean up whitespace when inserting yanked text.

#+begin_src emacs-lisp
  (defun config--yank-ws-cleanup (&rest _)
    (whitespace-cleanup)
    (delete-trailing-whitespace))

  (advice-add #'insert-for-yank :after #'config--yank-ws-cleanup)
#+end_src

** Smooth scrolling

Anchor the cursor to the top or bottom of the window during scrolling, rather
than paginating through the buffer.

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t)
  (setq scroll-conservatively 101)
#+end_src

** Comint

#+begin_src emacs-lisp
  (use-package comint
    :custom
    ((comint-prompt-read-only t)))
#+end_src

** Help

Always focus on help windows.

#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

Don't show 'press q to close' message.

#+begin_src emacs-lisp
  (advice-add 'help-window-display-message :override #'ignore)
#+end_src

Customise how help buffers should be displayed.

#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Help*" eos)
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (side            . right)
                 (window-width    . 80)))
#+end_src

=apropos= searches for symbols matching a pattern. Extend it to search more kinds
of symbols.

#+begin_src emacs-lisp
  (use-package apropos
    :custom
    ((apropos-do-all t)))
#+end_src

** State persistence

=saveplace= persists the last location visited in a buffer.

#+begin_src emacs-lisp
  (use-package saveplace
    :demand t
    :config (save-place-mode +1))
#+end_src

=savehist= saves the minibuffer history across sessions.

#+begin_src emacs-lisp
  (use-package savehist
    :demand t
    :config (savehist-mode +1)
    :custom
    ((savehist-additional-variables '(kill-ring
                                      compile-command
                                      search-ring
                                      regexp-search-ring))))
#+end_src

** Bidirectional text editing

Configure Emacs so that each paragraph may have a difference text direction.

#+begin_src emacs-lisp
  (setq-default bidi-paragraph-separate-re "^")
  (setq-default bidi-paragraph-start-re "^")
#+end_src

** =display-buffer= settings

Prevent display-buffer from displaying in new frames.

#+begin_src emacs-lisp
  (defun config--display-buffer-fallback (buffer &rest _)
    (when-let* ((win (split-window-sensibly)))
      (with-selected-window win
        (switch-to-buffer buffer)
        (help-window-setup (selected-window))))
    t)

  (setq display-buffer-fallback-action
        '((display-buffer--maybe-same-window
           display-buffer-reuse-window
           display-buffer-pop-up-window
           display-buffer-in-previous-window
           display-buffer-use-some-window
           config--display-buffer-fallback)))
#+end_src

** Large file support

#+begin_src emacs-lisp
  (defconst config--large-file-allowed-extensions
    '("pdf" "png" "jpg" "jpeg"))

  (defun config--dont-abort-if-allowed-extension (f &rest args)
    (-let [(_size _op filename) args]
      (unless (--any-p (f-ext-p filename it) config--large-file-allowed-extensions)
        (apply f args))))

  (advice-add #'abort-if-file-too-large :around #'config--dont-abort-if-allowed-extension)
#+end_src

** Recent files

Increase the number of saved files.

#+begin_src emacs-lisp
  (with-eval-after-load 'recentf
    (setq recentf-max-saved-items 100))
#+end_src

Teach =recentf= which files to exclude.

#+begin_src emacs-lisp
  (use-package recentf
    :custom
    ((recentf-exclude '(config-recentf--boring-filename-p
                        config-recentf--boring-extension-p
                        file-remote-p
                        config-recentf--sudo-file-p
                        config-recentf--child-of-boring-relative-dir-p
                        config-recentf--child-of-boring-abs-dir-p)))
    :preface
    (progn
      (defun config-recentf--boring-filename-p (f)
        (memq (f-filename f) '("TAGS" ".DS_Store")))

      (defun config-recentf--boring-extension-p (f)
        (seq-intersection (f-ext f) '("gz" "zip" "tar")))

      (defun config-recentf--sudo-file-p (f)
        (string-prefix-p "/sudo:root@" f))

      (defun config-recentf--child-of-boring-relative-dir-p (f)
        (string-match-p (rx "/"
                            (or
                             ".cargo"
                             ".ensime_cache"
                             ".g8"
                             ".git"
                             ".stack-work"
                             "Maildir"
                             "build"
                             "dist"
                             "flow-typed/npm"
                             "target"
                             "vendor"
                             )
                            "/")
                        f))

      (defconst config-recentf--abs-dirs
        (seq-map (lambda (it) (f-slash (file-truename it)))
                 (list "/var/folders/"
                       "/usr/local/Cellar/"
                       "/tmp/"
                       "/nix/store/"
                       paths-cache-directory
                       paths-etc-directory)))

      (defun config-recentf--child-of-boring-abs-dir-p (f)
        (let ((ignore-case (eq system-type 'darwin)))
          (seq-find (lambda (d)
                      (or
                       (string-prefix-p d f ignore-case)
                       (string-prefix-p d (file-truename f) ignore-case)))
                    config-recentf--abs-dirs)))))
#+end_src

** Multilingual input support

Set up LaTeX-style input method and add extra MULE rules for common chars.

#+begin_src emacs-lisp
  (use-package mule
    :custom
    ((default-input-method "TeX"))

    :preface
    (progn
      (defvar quail-current-package)

      (defun config-mule--set-tex-method-vars ()
        (when-let* ((quail-current-package (assoc "TeX" quail-package-alist)))
          (quail-defrule ";" (quail-lookup-key "\\"))
          (quail-define-rules ((append . t))
                              ("\\null" ?∅)
                              ("\\rarr" ?→)
                              ("\\larr" ?←)
                              ("\\lr" ?↔)
                              ("\\lam" ?λ)
                              ("\\Lam" ?Λ)
                              ("\\all" ?∀)
                              ("\\rtack" ?⊢)))))
    :config
    (add-hook 'input-method-activate-hook #'config-mule--set-tex-method-vars))
#+end_src

** auto-revert changed files

Automatically revert buffers if the underlying file changes on disk.

#+begin_src emacs-lisp
  (use-package autorevert
    :hook (after-init . global-auto-revert-mode)
    :custom
    ((auto-revert-verbose nil)))
#+end_src

** Clickable URLs

=goto-addr= turns URLs and mailto links into clickable buttons.

#+begin_src emacs-lisp
  (use-package goto-addr
    :hook (prog-mode . goto-address-prog-mode))
#+end_src

** Built-in HTML rendering

#+begin_src emacs-lisp
  (use-package shr
    :config
    ;; Undefine key that prevents forward-word in evil
    (define-key shr-map (kbd "w") nil))
#+end_src


** Code folding

=hideshow= provides basic code folding. It can sometimes throw annoying errors, so
use advice to ignore these.

#+begin_src emacs-lisp
  (use-package hideshow
    :config
    (progn
      (advice-add 'hs-hide-all :around #'advice-ignore-errors)
      (advice-add 'hs-hide-block :around 'advice-ignore-errors)
      (advice-add 'hs-minor-mode :around #'advice-ignore-errors)
      (advice-add 'hs-show-all :around #'advice-ignore-errors)
      (advice-add 'hs-show-block :around #'advice-ignore-errors)
      (advice-add 'hs-toggle-hiding :around #'advice-ignore-errors)))
#+end_src


** Enable authinfo file support

#+begin_src emacs-lisp
  (use-package auth-source
    :custom ((auth-sources '("~/.authinfo.gpg"))))
#+end_src

** Pixel-wise scrolling

#+begin_src emacs-lisp
  (use-package pixel-scroll
    :demand t
    :config (pixel-scroll-mode +1))
#+end_src

** Manpages

#+begin_src emacs-lisp
  (use-package man
    :general (:keymaps 'Man-mode-map
              "M-n" #'Man-next-section
              "M-p" #'Man-previous-section))
#+end_src

** Spellchecking

#+begin_src emacs-lisp
  (use-package ispell
    :defer t
    :custom
    ((ispell-program-name "aspell")
     (ispell-dictionary "en_GB")
     (ispell-silently-savep t))
    :preface
    (progn
      (autoload 'ispell-check-version "ispell")
      (autoload 'ispell-find-aspell-dictionaries "ispell"))
    :config
    (progn
      (ispell-check-version)
      (setq ispell-dictionary-alist (ispell-find-aspell-dictionaries))))
#+end_src

** Info system

Emacs and many packages provide manuals in the =info= format. Configure this
system below.

#+begin_src emacs-lisp
  (use-package info
    :general
    (:states 'normal :keymaps 'Info-mode-map
     "C-n" 'Info-forward-node
     "C-p" 'Info-backward-node))
#+end_src

=info+= adds lots of extra functionality, like bookmarking, etc.

#+begin_src emacs-lisp
  (use-package info+
    :after (info)
    :custom ((Info-fontify-angle-bracketed-flag nil)))
#+end_src

** Image viewing

#+begin_src emacs-lisp
  (use-package image
    :general (:keymaps 'image-mode-map :states '(normal motion)
              "-" #'image-decrease-size
              "+" #'image-increase-size))
#+end_src

** Jumping to common websites

=webjump= provides an interface for quickly performing web searches and jumping to
websites.

#+begin_src emacs-lisp
  (use-package webjump
    :commands (webjump)
    :custom (webjump-sites
             '(("DuckDuckGo" . [simple-query "duckduckgo.com" "duckduckgo.com/?q=" ""])
               ("Google Calendar" . "calendar.google.com")
               ("GMail" . "mail.google.com")
               ("home-manager options" . "https://rycee.gitlab.io/home-manager/options.html")
               ("Emacs Subreddit" . "reddit.com/r/emacs")
               ("NixOS Options" . [simple-query "nixos.org" "nixos.org/nixos/options.html#" ""])
               ("NixOS Packages" . [simple-query "nixos.org" "nixos.org/nixos/packages.html?query=" ""])
               ("Wikipedia" . [simple-query "en.wikipedia.org" "en.wikipedia.org/wiki/" ""]))))
#+end_src


* Direnv support

Teach Emacs how to load environment variables from [[https://direnv.net/][direnv]].

See: [[https://github.com/wbolster/emacs-direnv][wbolster/emacs-direnv]]

#+begin_src emacs-lisp
  (use-package direnv
    :hook (after-init . direnv-mode)
    :custom
    ((direnv-always-show-summary nil)))
#+end_src

* Ediff

Configure how =ediff= should display windows when started.

#+begin_src emacs-lisp
  (use-package ediff
    :custom
    ((ediff-window-setup-function #'ediff-setup-windows-plain)
     (ediff-split-window-function #'split-window-horizontally)))
#+end_src

Teach =ediff= how to copy contents from both buffers in a three-way merge.

#+begin_src emacs-lisp
  (use-package ediff
    :functions
    (ediff-setup-windows-plain ediff-copy-diff ediff-get-region-contents)
    :preface
    (progn
      (defun ediff-copy-both-to-C ()
        "Copy both ediff buffers in a 3-way merge to the target buffer."
        (interactive)
        (let ((str
               (concat
                (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
          (ediff-copy-diff ediff-current-difference nil 'C nil str)))

      (defun config-ediff--setup-keybinds ()
        (define-key ediff-mode-map (kbd "B") #'ediff-copy-both-to-C)))
    :config
    (add-hook 'ediff-keymap-setup-hook #'config-ediff--setup-keybinds))
#+end_src

Reveal the context around the selected hunk when diffing org buffers.

#+begin_src emacs-lisp
    (use-package ediff
      :preface
      (progn
        (autoload 'org-reveal "org")

        (defun config-ediff--org-reveal-around-difference (&rest _)
          (dolist (buf (list ediff-buffer-A ediff-buffer-B ediff-buffer-C))
            (when (and buf (buffer-live-p buf))
              (with-current-buffer buf
                (when (derived-mode-p 'org-mode)
                  (org-reveal t)))))))
      :config
      (progn
        (advice-add 'ediff-next-difference :after #'config-ediff--org-reveal-around-difference)
        (advice-add 'ediff-previous-difference :after #'config-ediff--org-reveal-around-difference)))
#+end_src

* World clock

=world-time-mode= provides a world clock.

#+begin_src emacs-lisp
  (use-package world-time-mode
    :commands (world-time-list)
    :general
    (:states 'normal :keymaps 'world-time-table-mode-map "q" 'quit-window)
    :custom
    ((display-time-world-list '(("Pacific/Auckland" "NZT")
                                ("America/Los_Angeles" "Pacific Time")
                                ("Europe/Istanbul" "Turkey")
                                ("Asia/Beirut" "Lebanon")
                                ("Europe/Berlin" "Euro Central")
                                ("UTC" "UTC"))))
    :config
    (add-hook 'world-time-table-mode-hook 'hl-line-mode))
#+end_src

* Compilation

#+begin_src emacs-lisp
  (use-package compile
    :custom
    ((compilation-environment '("TERM=screen-256color"))
     (compilation-always-kill t)
     (compilation-ask-about-save nil)
     (compilation-scroll-output 'first-error)))
#+end_src

Colourise compilation output.

#+begin_src emacs-lisp
  (use-package compile
    :preface
    (progn
      (autoload 'ansi-color-apply-on-region "ansi-color")

      (defvar compilation-filter-start)

      (defun config-basic-settings--colorize-compilation-buffer ()
        (let ((inhibit-read-only t))
          (ansi-color-apply-on-region (save-excursion
                                        (goto-char compilation-filter-start)
                                        (line-beginning-position))
                                      (point))))

      (defface compilation-base-face nil
        "Base face for compilation highlights"
        :group 'config-basic-settings))

    :config
    (progn
      (add-hook 'compilation-filter-hook #'config-basic-settings--colorize-compilation-buffer)

      (add-to-list 'display-buffer-alist
                   `(,(rx bos "*compilation*" eos)
                     (display-buffer-reuse-window display-buffer-below-selected)
                     (window-height    . 0.2)))

      ;; Clear default underline text properties applied to compilation highlights.
      (setq compilation-message-face 'compilation-base-face)))
#+end_src

Position compilation buffers.

#+begin_src emacs-lisp
  (use-package compile
    :config
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*compilation*" eos)
                   (display-buffer-reuse-window display-buffer-below-selected)
                   (window-height    . 0.2))))
#+end_src

Clear default underline text properties applied to compilation highlights.

#+begin_src emacs-lisp
  (use-package compile
    :custom
    ((compilation-message-face 'compilation-base-face)))
#+end_src

* Window navigation

=winner-mode= saves the window and buffer layout history, allowing you to cycle
forward and back through layout states. This is useful for recovering a layout
after editing actions have changed what windows are shown.

#+begin_src emacs-lisp
  (use-package winner
    :general ("<C-left>" 'winner-undo
              "<C-right>"'winner-redo)
    :hook (after-init . winner-mode)
    :custom
    ((winner-boring-buffers '("*Completions*"
                              "*Compile-Log*"
                              "*inferior-lisp*"
                              "*Fuzzy Completions*"
                              "*Apropos*"
                              "*Help*"
                              "*cvs*"
                              "*Buffer List*"
                              "*Ibuffer*"
                              "*esh command on file*"))))
#+end_src

* Text completion engines

** =hippie-expand=

=hippie-expand= is a generic completion engine that works in most buffers without
any special language-level support.

Use =hippie-expand= as the default completion command for evil.

#+begin_src emacs-lisp
  (use-package hippie-exp
    :general ("M-/" 'hippie-expand
              :states 'insert
              [remap evil-complete-previous] 'hippie-expand))
#+end_src


Set the default heuristic for completing symbols.

#+begin_src emacs-lisp
  (use-package hippie-exp
    :custom
    ((hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))))
#+end_src

* Modal editing & Evil

Evil breaks cursor settings when combined with hydra.

#+begin_src emacs-lisp
  (setq-default cursor-in-non-selected-windows nil)
#+end_src

** Use escape key as =keyboard-quit=

Make =<escape>= issue =keyboard-quit= in as many situations as possible.

#+begin_src emacs-lisp
  (define-key minibuffer-local-map (kbd "<escape>") #'keyboard-escape-quit)
  (define-key minibuffer-local-ns-map (kbd "<escape>") #'keyboard-escape-quit)
  (define-key minibuffer-local-completion-map (kbd "<escape>") #'keyboard-escape-quit)
  (define-key minibuffer-local-must-match-map (kbd "<escape>") #'keyboard-escape-quit)
  (define-key minibuffer-local-isearch-map (kbd "<escape>") #'keyboard-escape-quit)
#+end_src

* File postamble

#+begin_src emacs-lisp
  ;; (provide 'config)
  ;;; config.el ends here
#+end_src
