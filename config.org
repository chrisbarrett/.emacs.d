# -*- eval: (add-hook 'after-save-hook #'tangle-init-files nil t); -*-
#+title: Emacs Configuration
#+author: Chris Barrett
#+property: header-args :results silent
#+property: header-args:emacs-lisp :tangle "config.el"
#+startup: fold

* Early Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle "early-init.el"
:END:

#+begin_src emacs-lisp
  ;;; early-init.el -- Run at the beginning of Emacs startup sequence.  -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;; This file was generated by org-babel from config.org and should not be edited
  ;; directly.

  ;;; Code:
#+end_src

Set an environment variable so child processes can detect that they're inside
Emacs.

#+begin_src emacs-lisp
  (setenv "INSIDE_EMACS" "true")
#+end_src

Crank up the max size of subprocess output to read. This is needed for language
servers to perform well, since they communicate using large chunks of JSON.

#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+end_src

** Disable package.el

Disable =package.el=, since it increases startup time and I use
[[https://github.com/nix-community/emacs-overlay][nix-community/emacs-overlay]] to handle package installation.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

** Garbage collection settings

Garbage collection runs slow down the Emacs startup sequence. Temporarily
increase settings. We will set final values at the end of the startup sequence.

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.7)
#+end_src

** ELN cache path

Override the ELN cache directory so that it's in an XDG-conformant directory.

#+begin_src emacs-lisp
  (when (boundp 'comp-eln-load-path)
    (let ((cache-dir "~/.cache/emacs/eln-cache/"))
      (mkdir cache-dir t)
      (add-to-list 'comp-eln-load-path cache-dir)))
#+end_src

** Apply early display settings

Enable pixel-wise frame resizing so tiling window managers do the right thing.

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

Disable some window chrome that doesn't make sense in a keyboard-driven UI.

#+begin_src emacs-lisp
  (custom-set-variables '(menu-bar-mode nil)
                        '(tool-bar-mode . nil)
                        '(scroll-bar-mode nil))

  (modify-all-frames-parameters '((vertical-scroll-bars)
                                  (name . "Emacs")))
#+end_src


* File header

#+begin_src emacs-lisp
  ;;; config.el -- User init file for Emacs.  -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;; This file was generated by org-babel from config.org and should not be edited
  ;; directly.

  ;;; Code:
#+end_src

* Tune garbage collection

See: [[https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][Why are you changing gc-cons-threshold?]]

#+begin_src emacs-lisp
  (defvar config-default-gc-threshold 800000)

  (defun config--inhibit-gc ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun config--enable-gc ()
    (setq gc-cons-threshold config-default-gc-threshold))
#+end_src

Restore GC settings after init sequence has completed.

#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'config--enable-gc)
#+end_src

Prevent GCs during user input in the minibuffer.

#+begin_src emacs-lisp
  (add-hook 'minibuffer-setup-hook #'config--inhibit-gc)
  (add-hook 'minibuffer-exit-hook #'config--enable-gc)
#+end_src

* Set initial background colour

Set a reasonable background colour before colour theme is loaded by checking the
current GNOME theme.

#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
    (let ((gtk-theme (with-temp-buffer
                       (ignore-errors
                         (call-process "gsettings" nil t nil
                                       "get" "org.gnome.desktop.interface" "gtk-theme"))
                       (buffer-string))))
      (set-background-color (if (string-match-p "dark" gtk-theme) "#282c34" "#FDF6E3"))))
#+end_src

* Configure =use-package=

=use-package= provides a structured DSL for Lisp package configuration.

See: [[https://github.com/jwiegley/use-package][jwiegley/use-package]]

#+begin_src emacs-lisp
  (with-no-warnings
    (setq use-package-verbose t))

  (eval-when-compile
    (require 'use-package))
  #+end_src

* Load =cl=

Load this early to avoid warnings caused by reorganised functions in Emacs 27+.

#+begin_src emacs-lisp
  (with-no-warnings
    (require 'cl))
#+end_src

* Configure paths and config layout

#+begin_src emacs-lisp
  (require 'paths (expand-file-name "paths.el" user-emacs-directory))
  (paths-initialise)
#+end_src

Load themes from =.emacs.d/themes=.

#+begin_src emacs-lisp
  (setq custom-theme-directory (concat paths-themes-directory "/"))
#+end_src

Create autosave files inside the XDG cache directory.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name "auto-save" paths-cache-directory) t)))
#+end_src

** Configure =no-littering= to use these paths

Customises many packages to create a cleaner =.emacs.d= layout.

See: [[https://github.com/emacscollective/no-littering][emacscollective/no-littering]]

#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :custom
    ((no-littering-etc-directory paths-etc-directory)
     (no-littering-var-directory paths-cache-directory))
    :config
    (progn
      (eval-when-compile
        (require 'recentf))

      (with-eval-after-load 'recentf
        (add-to-list 'recentf-exclude no-littering-etc-directory)
        (add-to-list 'recentf-exclude no-littering-var-directory))))
#+end_src


* Load Lisp files from certain other directories                   :disabled:

Load host-specific settings, which are not checked into version control.

#+begin_src emacs-lisp
  (when (file-exists-p paths-hostfile)
    (load-file paths-hostfile))
#+end_src

Load lisp in =org= and =ledger= dirs.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (when (file-directory-p paths-org-lisp-directory)
      (load (expand-file-name "init.el" paths-org-lisp-directory) t)))

  (when (file-directory-p paths-ledger-lisp-directory)
    (load (expand-file-name "init.el" paths-ledger-lisp-directory) t))
#+end_src


* File postamble

#+begin_src emacs-lisp
  ;; (provide 'config)
  ;;; config.el ends here
#+end_src
